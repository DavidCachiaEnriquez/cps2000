pixelr __height, __width, y, x, colour
--------------------------------------------

Program 1 - Diagonals (Multiple Colours)

fun getRandomColour() -> int{
    return __randi 16777215;
}

fun printPixels(h:int, w:int, p1:int, p2:int) -> int{
    __delay 10;
    __pixelr h, w, p1, p2, getRandomColour();
    return 0;
}

__pixelr __height, __width, 0, 0, #123456;

let looper:int = 0;
let fCall:int = 0;

while (looper == 0){

    for (let x:int = __width-1; x >= 0; x = x - 1){
        fCall = printPixels(__height, 1, x, x);
    }

    for (let x:int = __width-1; x >= 0; x = x - 1){
        fCall = printPixels(__height, 1, x, (__width-x)-1);
    }

    for (let x:int = 0; x < __width; x = x + 1){
        fCall = printPixels(1, __width, x, x);
    }

    for (let x:int = 0; x < __width; x = x + 1){
        fCall = printPixels((__height-x), 1, 0, x);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------
Program 2 - Diagonals (Solid Colours)

fun getRandomColour() -> int{
    return __randi 16777215;
}

__pixelr __height, __width, 0, 0, #123456;

let looper:int = 0;
let fCall:int = 0;
while (looper == 0){

    let z:int = getRandomColour();
    for (let x:int = __width-1; x >= 0; x = x - 1){
        __delay 10;
        __pixelr __height, 1, x, x, z;
    }

    z = __randi 16777215;
    for (let x:int = __width-1; x >= 0; x = x - 1){
        __delay 10;
        __pixelr __height, 1, x, (__width-x)-1, z;
    }

    z = __randi 16777215;
    for (let x:int = 0; x < __width; x = x + 1){
        __delay 10;
        __pixelr 1, __width, x, x, z;
    }

    z = __randi 16777215;
    for (let x:int = 0; x < __width; x = x + 1){
        __delay 10;
        __pixelr __height-x, 1, 0, x, z;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------
Program 3 - Enclosing Squares

fun randomColour() -> int{
    return __randi 16777215;
}

fun printSquare(a:int, b:int, c:int, d:int, e:int) -> int{
    let randomColour:int = randomColour();
    __pixelr a, 1, b, b, randomColour;
    __pixelr a, 1, b, c, randomColour;

    __pixelr 1, d, b, b, randomColour;
    __pixelr 1, d, e, b, randomColour;

    return 0;
}

__pixelr __height, __width, 0, 0, #123456;

let looper:int = 0;

while(looper == 0){

    let u:int = __width-1;
    let v:int = __height-1;

    let h:int = __height;
    let w:int = __width;

    for(let x:int = 0; x < (__width/2); x = x+1){

        let fCall:int = printSquare(h, x, u, w, v);

        u = u-1; v = v-1;
        h = h-2; w = w-2;
        __delay 30;

    }
}
------------------------------------------------------------------------------------------------------------------------------------------------
Program 4 - SMPTE Bar (Set display to 105, 90)

__pixelr __height, __width, 0, 0, #000000;

let startPoint:int = 0;
let bHeight:int = 15;
let bWidth:int = 18;

let counter:int = 0;
let x:int = 0;
while(x < __width){

    if (counter == 1){
        __pixelr bHeight, bWidth, startPoint, x, #dfe0eb;
    }else{
        __pixelr bHeight, bWidth, startPoint, x, #1a1818;
        if (counter == 6){
            counter = 0-1;
        }
    }
    x = x + bWidth;
    counter = counter + 1;
}

startPoint = startPoint + bHeight;
let mHeight:int = 5;
let mWidth:int = 15;

counter = 0;
let y:int = 0;
while(y < __width){

    if (counter == 0){
        __pixelr mHeight, mWidth, startPoint, y, #1020b3;
    }

    if (counter == 1){
        __pixelr mHeight, mWidth, startPoint, y, #1a1818;
    }

    if (counter == 2){
        __pixelr mHeight, mWidth, startPoint, y, #d140d6;
    }

    if (counter == 3){
        __pixelr mHeight, mWidth, startPoint, y, #1a1818;
    }

    if (counter == 4){
        __pixelr mHeight, mWidth, startPoint, y, #72e6f7;
    }

    if (counter == 5){
        __pixelr mHeight, mWidth, startPoint, y, #1a1818;
    }

    if (counter == 6){
        __pixelr mHeight, mWidth, startPoint, y, #dfe0eb;
        counter = 0-1;
    }

    y = y + mWidth;
    counter = counter + 1;
}

startPoint = startPoint + mHeight;
let tHeight:int = __height;
let tWidth:int = 15;

counter = 0;
let z:int = 0;
while(z < __width){

    if (counter == 0){
        __pixelr tHeight, tWidth, startPoint, z, #dfe0eb;
    }

    if (counter == 1){
        __pixelr tHeight, tWidth, startPoint, z, #eff21f;
    }

    if (counter == 2){
        __pixelr tHeight, tWidth, startPoint, z, #8afbff;
    }

    if (counter == 3){
        __pixelr tHeight, tWidth, startPoint, z, #28d431;
    }

    if (counter == 4){
        __pixelr tHeight, tWidth, startPoint, z, #ab17b3;
    }

    if (counter == 5){
        __pixelr tHeight, tWidth, startPoint, z, #e61e24;
    }

    if (counter == 6){
        __pixelr tHeight, tWidth, startPoint, z, #0a178c;
        counter = 0-1;
    }

    z = z + tWidth;
    counter = counter + 1;
}


let looper:int = 0;
counter = 6;
while(looper == 0){

    if (counter < 0){
        counter = 6;
    }

    let a:int = 0;
    while(a < __width){

        if (counter == 0){
            __pixelr tHeight, tWidth, startPoint, a, #dfe0eb;
        }

        if (counter == 1){
            __pixelr tHeight, tWidth, startPoint, a, #eff21f;
        }

        if (counter == 2){
            __pixelr tHeight, tWidth, startPoint, a, #8afbff;
        }

        if (counter == 3){
            __pixelr tHeight, tWidth, startPoint, a, #28d431;
        }

        if (counter == 4){
            __pixelr tHeight, tWidth, startPoint, a, #ab17b3;
        }

        if (counter == 5){
            __pixelr tHeight, tWidth, startPoint, a, #e61e24;
        }

        if (counter == 6){
            __pixelr tHeight, tWidth, startPoint, a, #0a178c;
            counter = 0-1;
        }

        a = a + tWidth;
        counter = counter + 1;
    }

    counter = counter - 1;
    __delay 250;
}







